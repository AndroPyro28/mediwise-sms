// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN //admin in mediwise
  PATIENT //patient in mediwise
  DOCTOR //doctor in mediwise
  STOCK_MANAGER // manager stock management system
}

enum AppoinmentStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

model Barangay {
  id        String     @id @unique @default(cuid())
  name      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  users     User[]
  items     BrgyItem[]
}

model SmsItem {
  id          String   @id @default(cuid())
  description String?  @db.VarChar(255)
  name        String?  @db.VarChar(255)
  stock       Int?     @db.Int
  unit        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  isArchive   Boolean  @default(false)
}

model BrgyItem {
  id          String    @id @default(cuid())
  description String?   @db.VarChar(255)
  name        String?   @db.VarChar(255)
  stock       Int?      @db.Int
  unit        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  barangayId  String?
  barangay    Barangay? @relation(fields: [barangayId], references: [id])
  requestId   String?
  isArchive   Boolean   @default(false)
}

model User {
  id String @id @default(cuid())

  isArchived     Boolean   @default(false)
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role      @default(PATIENT)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  barangayId String?
  barangay   Barangay? @relation(fields: [barangayId], references: [id])

  accounts             Account[]
  sessions             Session[]
  profile              Profile?
  patient_appointments Appointment[]  @relation("patient")
  doctor_appointments  Appointment[]  @relation("doctor")
  workSchedules        WorkSchedule[]

  @@index([id])
}

model Appointment {
  id         String           @id @unique @default(cuid())
  title      String           @db.VarChar(255)
  doctorId   String?
  doctor     User?            @relation(name: "doctor", fields: [doctorId], references: [id])
  patientId  String?
  patient    User?            @relation(name: "patient", fields: [patientId], references: [id])
  date       DateTime
  status     AppoinmentStatus @default(PENDING)
  image_path String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt
}

model WorkSchedule {
  id         String  @id @unique @default(cuid())
  title      String
  isArchived Boolean @default(false)
  start       DateTime?
  end         DateTime?
  allDay      Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // doctor who owns the work schedule
  doctorId  String
  doctor    User     @relation(fields: [doctorId], references: [id])
}

enum Gender {
  MALE
  FEMALE
}

model Profile {
  id String @id @unique @default(cuid())

  firstname  String?
  lastname   String?
  middlename String?
  suffix     String?
  gender     Gender?

  specialist String? // for doctor only
  licenseNo  String? // for doctor only

  dateOfBirth DateTime?
  homeNo      String?
  street      String?
  barangay    String?
  city        String?
  // province    String?
  contactNo   String?
  zip         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@index([userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
