// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN //admin in mediwise
  PATIENT //patient in mediwise
  DOCTOR //doctor in mediwise
  STOCK_MANAGER // manager stock management system
}

model barangay {
  id        String   @id @unique @default(cuid())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  users      User[]
}

model User {
  id String @id @default(cuid())

  isArchived     Boolean   @default(false)
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  barangay_id String?
  barangay    barangay? @relation(fields: [barangay_id], references: [id])

  accounts Account[]
  sessions Session[]
  profile  Profile?

  @@index([id])
}

enum Gender {
  MALE
  FEMALE
}

model Profile {
  id String @id @unique @default(cuid())

  firstname  String?
  lastname   String?
  middlename String?
  suffix     String?
  gender     Gender?

  specialist String? // for doctor only
  licenseNo  String? // for doctor only

  dateOfBirth DateTime?
  homeNo      String?
  street      String?
  barangay    String?
  city        String?
  province    String?
  contactNo   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@index([userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
